# ================================== admin.py ====================================
from django.contrib import admin
# from django.contrib.auth.admin import UserAdmin
from .models import Student


class UserAdmin(admin.ModelAdmin):

    list_display = ['username', 'email']  # , 'role'

class ProfileAdmin(admin.ModelAdmin):
    list_editable = ['verified']
    list_display = ['user', 'full_name', 'verified']

class SudentAdmin(admin.ModelAdmin):
    list_editable = ['roll', 'name', 'city']
    list_display = ['id', 'roll', 'name', 'city']
    


# admin.site.register(MyUser, UserAdmin)
# admin.site.register(Profile, ProfileAdmin)

admin.site.register(Student, SudentAdmin)

# -------------------- Another Way ---------------------------

# @admin.register(Student)
# class StudentAdmin(admin.ModelAdmin):
#     list_display = ['id', 'name', 'roll', 'city']
# -------------------- Another Way ---------------------------









# ================================== models.py ====================================
from django.db import models

# Create your models here.

class Student(models.Model):
    name = models.CharField(max_length=100, null= True)
    roll = models.IntegerField()
    city = models.CharField(max_length=100, null=True)

    def __str__(self):
        return self.name







# ================================== serializers.py ====================================
from rest_framework import serializers
from .models import Student


# class StudentSerializer(serializers.Serializer):
#     '''By defaul you will not see id in json response to
#         see it, you have to add explicitly here'''

#     id = serializers.IntegerField(read_only=True)
#     name = serializers.CharField(max_length=100)
#     roll = serializers.IntegerField()
#     city = serializers.CharField(max_length=100)

#     def create(self, validated_data):
#         return Student.objects.create(**validated_data)

#     def update(self, instance, validated_data):
#         instance.name = validated_data.get('name', instance.name)
#         instance.roll = validated_data.get('roll', instance.roll)
#         instance.city = validated_data.get('city', instance.city)
#         instance.save()
#         return instance

# ------------------- Model Serializer Start -----------------------
class StudentSerializer(serializers.ModelSerializer):
    """
    You have to user Either 'fields' or 'exclude'.

    You can use normal Serializer or Model Serializer both are good,
    but using Model serializer is good choice because we have to code less 
    and many built in things are present.
    """

    # --------------------- Customer Validation ----------------------------
    """The Django Rest Framework does not have Meta attribute. Don't user this 

       read_only_fields = ('name', 'roll') # Not Working.
       extra_kwargs = {
           'name': {'read_only': True},
           'roll': {'read_only': True},
        }
    """
    

    # If we update all fields then also our 'name' field will not update.
    # name = serializers.CharField(read_only=True) # Working.
    # roll = serializers.IntegerField(read_only=True) # Working.
    class Meta:
        model = Student

        # fields = ['id', 'name', 'roll', 'city']
        fields = '__all__'

        # exclude = ['roll']

        # ------------ Validations --------------
        # 1. Field Level Validation:-
        # def validate_roll(self, value):
        #     if value>20:
        #         raise serializers.ValidationError('Seat Full')
        #     return value
        # ------------ Validations --------------
# ------------------- Model Serializer End -----------------------









# ================================== urls.py ====================================
from django.urls import path
from api import views

urlpatterns = [
    path('', views.home),
    path('stdinfo/<int:id>/', views.student_detail),
    path('student-api/', views.student_api),
    path('stdinfo/', views.student_details),
]








# ================================== views.py ====================================
from django.shortcuts import render
from .models import Student
from .serializers import StudentSerializer
from rest_framework.response import Response
from django.http import HttpResponse, JsonResponse
import io
from rest_framework.parsers import JSONParser

from django.views.decorators.csrf import csrf_exempt
from django.utils.decorators import method_decorator
from django.views import View

# ==================================== Write Your Code Here ==========================================
def home(request):
    return render(request, 'index.html')


def student_info(request):
    student = Student.objects.all()
    serializer = StudentSerializer(student, many=True)
    return JsonResponse(serializer.data, safe=False) # safe=False # Imp for more than one keys.


@method_decorator(csrf_exempt, name='dispatch')
class StudentAPI(View):
    # ---------------------------------VIEW ------------------------------------------------
    def get(self, request, *args, **kwargs):
        """
        You have to make a GET request with atleast
        empty `{}` Json data. Make request in thunder or requests. 
        """
        
        json_data = request.body
        stream = io.BytesIO(json_data)
        python_data = JSONParser().parse(stream)

        id = python_data.get('id', None)
        if id is not None:
            student = Student.objects.get(id=id)
            serializer = StudentSerializer(student)
            
            return JsonResponse(serializer.data)
            return HttpResponse('Get single data.')

        # If Id id None then send all data.
        students = Student.objects.all()
        serializer = StudentSerializer(students, many=True)
        
        return JsonResponse(serializer.data, safe=False)  # safe=False not required for single.

    # ---------------------------------CTEATE ----------------------------------------------
    def post(self, request, *args, **kwargs):
        json_data = request.body

        stream = io.BytesIO(json_data)
        python_data = JSONParser().parse(stream)
        serializer = StudentSerializer(data=python_data)

        if serializer.is_valid():
            serializer.save()
            response = {'msg': 'Data inserted successfully..!', 'status': 200}
            return JsonResponse(response)

        return JsonResponse(serializer.errors)

    # ---------------------------------PUT -------------------------------------------------
    def put(self, request, *args, **kwargs):
        json_data = request.body
        stream = io.BytesIO(json_data)
        python_data = JSONParser().parse(stream)

        id = python_data.get('id', None)
        if id is not None:
            try:
                student = Student.objects.get(id=id)

                ''' partial=True : This will expect all fields to update otherwise you will
                    get All fields required.'''
                # serializer = StudentSerializer(student, data = python_data, partial=True) # partial update.
                # full update.
                serializer = StudentSerializer(student, data=python_data)

                if serializer.is_valid():
                    serializer.save()
                    return JsonResponse({'msg': 'Data Udpated..!', 'status': 200})

                return JsonResponse(serializer.errors)
            except Student.DoesNotExist:
                return JsonResponse({'msg': "ID Doesn't Exists", 'status': 400})

    # ---------------------------------PATCH ------------------------------------------------
    def patch(self, request, *args, **kwargs):
        json_data = request.body
        stream = io.BytesIO(json_data)
        python_data = JSONParser().parse(stream)

        id = python_data.get('id', None)

        if id is not None:
            try:
                student = Student.objects.get(id=id)

                ''' partial=True : This will expect all fields to update otherwise you will
                    get All fields required.'''
                serializer = StudentSerializer(
                    student, data=python_data, partial=True)  # partial update.
                # serializer = StudentSerializer(student, data = python_data) # full update.

                if serializer.is_valid():
                    serializer.save()
                    return JsonResponse({'msg': 'Data Udpated..!', 'status': 200})

                return JsonResponse(serializer.errors)
                    
            except Student.DoesNotExist:
                return JsonResponse({'msg': "ID Doesn't Exists", 'status': 400})
                
        return JsonResponse({'msg': 'ID Not Sent', 'status': 400})

    # ---------------------------------DELETE -----------------------------------------------
    def delete(self, request, *args, **kwargs):
        json_data = request.body
        stream = io.BytesIO(json_data)
        python_data = JSONParser().parse(stream)

        id = python_data.get('id', None)

        if id is not None:
            try:
                student = Student.objects.get(id=id)
                student.delete()
                return JsonResponse({'msg': 'Data Deleted..!', 'status': 200})
            except Student.DoesNotExist:
                return JsonResponse({'msg':"ID Doesn't Exists", 'status':400})
        return JsonResponse({'msg':'ID Not Sent', 'status':400})








# ================================== Testing API ====================================
import requests

print('----------------------- Python Application Start -----------------------------')
# id = input('Enter Student Id : ')
# response = requests.get(f'http://127.0.0.1:8000/stdinfo/{id}')
response = requests.get(f'http://127.0.0.1:8000/stdinfo')
data = response.json()
print(data)
print('----------------------- Python Application End -----------------------------')
