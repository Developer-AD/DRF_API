# ==================================== urls.py ==========================================
from django.urls import path
from api import views

urlpatterns = [
    path('', views.home),
    path('student-api/', views.ListCreateStdAPI.as_view()),
    path('student-api/<int:pk>', views.RetrieveUpdateDeleteStdAPI.as_view()),
]





# ==================================== Views.py ==========================================
from django.shortcuts import render
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework import status

from rest_framework.generics import ListAPIView
from rest_framework.mixins import ListModelMixin, CreateModelMixin, RetrieveModelMixin, UpdateModelMixin, DestroyModelMixin

from .models import Student
from .serializers import StudentSerializer


# ==================================== Write Your Code Here ==========================================
def home(request):
    return render(request, 'index.html')

class ListCreateStdAPI(ListAPIView, ListModelMixin, CreateModelMixin):
    # -------------------------- LIST & CREATE VIEW ALL OBJ------------------------------
    queryset = Student.objects.all()
    serializer_class = StudentSerializer
    def get(self, request, *args, **kwargs):
        return self.list(request, *args, **kwargs)    

    def post(self, request, *args, **kwargs):
        return self.create(request, *args, **kwargs)

class RetrieveUpdateDeleteStdAPI(ListAPIView, RetrieveModelMixin, UpdateModelMixin, DestroyModelMixin):
    # ---------------------- RETRIVE, UPDATE, DELETE SINGLE OBJ ONLY -----------------------
    queryset = Student.objects.all()
    serializer_class = StudentSerializer
    def get(self, request, *args, **kwargs):
        return self.retrieve(request, *args, **kwargs)
    def put(self, request, *args, **kwargs):
        return self.update(request, *args, **kwargs)
    # -------------------------------- PATCH ------------------------------------------
    def patch(self, request, *args, **kwargs):
        return self.update(request, *args, **kwargs)
    # -------------------------------- DELETE ------------------------------------------
    def delete(self, request, *args, **kwargs):
        return self.destroy(request, *args, **kwargs)