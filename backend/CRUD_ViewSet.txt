#=================================== urls.py =====================================
from django.urls import path, include
from api import views

from rest_framework.routers import DefaultRouter

router = DefaultRouter()

router.register('student-api', views.StudentAPI, basename='student')

urlpatterns = [
    path('', include(router.urls)),
]





#=================================== views.py =====================================
from django.shortcuts import render
from .models import Student
from .serializers import StudentSerializer
from rest_framework import viewsets
from rest_framework.response import Response
from rest_framework import status



def home(request):
    return render(request, 'index.html')

# -------------------- USING CONCRETE VIEW COMBINED CLASS START -----------------------
class StudentAPI(viewsets.ViewSet):
    def list(self, request):
        student = Student.objects.all()
        serializer = StudentSerializer(student, many=True)
        return Response(serializer.data)

    def retrieve(self, request, pk=None):
        student = Student.objects.get(id=pk)
        serializer = StudentSerializer(student)
        return Response(serializer.data)

    def create(self, request):
        serializer = StudentSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)

    def update(self, request, pk):
        if pk is not None:
            student = Student.objects.get(id=pk)
            serializer = StudentSerializer(student, data=request.data)

            if serializer.is_valid():
                serializer.save()
                return Response({'message': 'Student updated successfully'}, status=status.HTTP_200_OK)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def partial_update(self, request, pk):
        if pk is not None:
            student = Student.objects.get(id=pk)
            serializer = StudentSerializer(student, data=request.data, partial=True)

            if serializer.is_valid():
                serializer.save()
                return Response({'message': 'Student partial updated successfully'}, status=status.HTTP_200_OK)
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)
    def destroy(self, request, pk):
        student = Student.objects.get(id=pk)
        student.delete()
        return Response({'message': 'Student deleted successfully'}, status=status.HTTP_204_NO_CONTENT)
# -------------------- USING CONCRETE VIEW COMBINED CLASS END ------------------------------------------
